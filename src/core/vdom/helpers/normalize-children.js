/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
// simpleNormalizeChildren 方法调用了场景是 render 函数当函数是编译生成的。
// 理论上编译生成的 children 都已经是 VNode 类型的，但是这里会有一些例外的情况，
// 就是 functional component 函数式组件返回的是一个数组而不是一个根节点，
// 所有会通过 Array.prototype.concat 方法把整个 children 数组打平，让它的深度只有一层。
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
export function normalizeChildren (children: any): ?Array<VNode> {
  // 首选判断是否是基础类型，是则直接创建文本vnode节点，数组调用 normalizeArrayChildren
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}
function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  // 定义 res 数组，最终返回 res 数组
  const res = []
  let i, c, lastIndex, last
  // 遍历 children 数组
  for (i = 0; i < children.length; i++) {
    c = children[i]
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    // 元素是否是一个数组
    if (Array.isArray(c)) {
      if (c.length > 0) {
        // 递归调用 normalizeArrayChildren 获取返回值
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // 优化 vnode 如果返回数组第一个值为文本节点，并且 res 最后一个节点也是文本节点
        // 则将 返回的数组第一个元素 合并到res最后一个元素上，
        // 调用 shift 删除 c 数组第一个元素
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift()
        }
        // 将结果 push 到 res 上
        res.push.apply(res, c)
      }
    // 元素是一个基础类型
    } else if (isPrimitive(c)) {
      // 若上一个元素也是 text 节点，则直接把这个加到上一个节点上
      if (isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // 若上一个元素不是 text 节点并且当前节点不为空，则创建一个 textVNode
        // 再 push 到 res 中
        res.push(createTextVNode(c))
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // 若上一个元素也是 text 节点，则直接把这个加到上一个节点上
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        // 这里会对 v-for 进行特殊处理
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
